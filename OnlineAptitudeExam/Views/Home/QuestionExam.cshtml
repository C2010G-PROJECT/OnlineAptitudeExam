@model OnlineAptitudeExam.Models.Question

@using OnlineAptitudeExam.Models;
@using OnlineAptitudeExam.Utils;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using System.Diagnostics;

@{

    ViewBag.Title = "QuestionExam";

    var questions = ViewBag.questions as List<Question>;

    var totalCorrectAnswers = ViewBag.totalCorrectAnswers as List<int>;

    int type = ViewBag.type;

    var timeRemaining = ViewBag.timeRemaining as string;

    var exam = ViewBag.exam as Exam;

    var examDetails = exam.ExamDetails.ToList();

}


<div class="quesmain">

    <nav class="navbar navbar-light bg-light">
        <div class="container-fluid">

            @if (type == 0)
            {
                <h4 style="line-height:40px;padding-left:30px; color:red;">General knowledge exam </h4>
            }
            else if (type == 1)
            {
                <h4 style="line-height: 40px; padding-left: 30px; color: red;">Mathetics exam </h4>

            }
            else if (type == 2)
            {
                <h4 style="line-height: 40px; padding-left: 30px; color: red;">Computer technology exam </h4>

            }

            <div style="line-height: 45px; font-size: 20px; color: red; "> <i class="fa-regular fa-clock"></i> &nbsp; Time Remaining : <span id="minRemaining"></span>:<span id="secRemaining"></span></div>
        </div>
    </nav>
   
    <form  id="question_form" style="padding-left: 300px;" data-test_id="@ViewBag.testId" data-url="@Url.Action("SaveExamResult")" method="post" >


        @for (int i = 0; i < questions.Count; i++)
        {
            <div class="question" data-question_id="@questions[i].id.ToString()">

                @{
                    var examDetail = examDetails.Find(ed => ed.question_id == questions[i].id);

                    string[] userAnswers = null;

                    if (examDetail != null)
                    {
                        userAnswers = examDetail.selected_question.Trim('[', ']').Split(new[] { ',' }).ToArray();
                    }

                    <p class="fw-bold"> @(i+1) .@questions[i].question <b style="color:orange;">(@questions[i].score marks)</b> </p>

                    var splitAnswer = questions[i].answers.Trim('[', ']').Split(new[] { ',' }).Select(x => x.Trim('"')).ToArray();
                    for (int j = 0; j < splitAnswer.Length; j++)
                    {

                        bool isChecked = userAnswers != null && userAnswers.Contains(j.ToString());
                        <p>
                            <input type='@(totalCorrectAnswers[i] == 1 ? "radio":"checkbox")' @(isChecked ? "checked" : "") id="@splitAnswer[j]" name="Answer'+@i+'" value="@j" />

                            <label for="@splitAnswer[j]"> &nbsp;&nbsp;@splitAnswer[j]</label>
                        </p>
                    }
                }

            </div>

        }

        <button style="margin-left:60%;" type="button" class="btn btn-outline-primary" id="btn_submit">
            Submit and next exam
        </button>

    </form>

</div>

@section scripts {
    <script>

        $("#btn_submit").off('click').on('click', function (e) {
            e.preventDefault();
            $(this).addClass('disabled')
            submit();
        });

        function submit() {
            let mForm = $("#question_form");
            let url = mForm.data("url");

            let testId = mForm.data("test_id");
            let examDetails = [];

            mForm.find(".question").each(function () {


                let questionId = $(this).data("question_id");


                let selectedQuestion = [];
                $(this).find("input").each(function (i) {
                    if ($(this).is(":checked")) {
                        selectedQuestion.push(i);
                    }
                });

                if (selectedQuestion.length == 0) {
                    
                    $(this).removeClass('disabled');
                    return false;
                }

                //console.log(testId + "    " + questionId + "    " + JSON.stringify(selectedQuestion));

                let examDetail = {
                   questionId : questionId,
                   selectedQuestion : JSON.stringify(selectedQuestion)
                };
                examDetails.push(examDetail);
            });

            let data = {
                testId: testId,
                examDetails: examDetails
            };
            loadUrl(url, function (data) {

                //console.log(data.message);
                if (data.success) {
                    window.location.reload();
                }

            }, null, "POST", data)

            return false;
        }

        // time setting

        function executeAsync(func) {
            setTimeout(func, 0);
        }

        var remSecond = @timeRemaining;
        var secondCounter = remSecond % 60;

        function formatNumber(number) {
            if (number < 10) {
                return '0' + number;
            } else {
                return '' + number;
            }
        }

        function startCount() {
            

            document.getElementById('secRemaining').innerText = formatNumber(secondCounter);
            document.getElementById('minRemaining').innerText = formatNumber(parseInt(remSecond / 60));

            var tick = setInterval(function () {

                if (remSecond > 0) {
                    remSecond = remSecond - 1;
                    secondCounter = secondCounter - 1;

                    document.getElementById('secRemaining').innerText = formatNumber(secondCounter);
                    document.getElementById('minRemaining').innerText = formatNumber(parseInt(remSecond / 60));

                    if (secondCounter == 0) {
                        secondCounter = 60;
                    }
                } else {

                    swal({
                        title: "Time out",
                        icon: "success",
                        button: "Ok",
                    });

                    clearInterval(tick);

                    window.location.reload();
                }

            },1000);
        }
       
      startCount();
        

    </script>

}
