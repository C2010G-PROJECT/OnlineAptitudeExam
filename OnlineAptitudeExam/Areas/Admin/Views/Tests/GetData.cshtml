@model PagedList.IPagedList<OnlineAptitudeExam.Models.Test>
@using PagedList.Mvc;
@using OnlineAptitudeExam.Utils;
@{
    Layout = null;
}
<div class="card card-body">
    <div class="table-responsive">
        <table id="tableTests" class="table table-custom table-hover table-bordered" data-sort="@ViewBag.CurrentSort" data-order="@ViewBag.CurrentOrder">
            @{
                string orderStt = SortHelper.GetOrder(SortHelper.STT, ViewBag.CurrentSort, ViewBag.CurrentOrder);
                string stt = SortHelper.ValueOrNull(SortHelper.STT, orderStt);
                string orderName = SortHelper.GetOrder(SortHelper.NAME, ViewBag.CurrentSort, ViewBag.CurrentOrder);
                string name = SortHelper.ValueOrNull(SortHelper.NAME, orderName);
                string orderDate = SortHelper.GetOrder(SortHelper.DATE, ViewBag.CurrentSort, ViewBag.CurrentOrder);
                string date = SortHelper.ValueOrNull(SortHelper.DATE, orderDate);
            }
            <thead>
                <tr>
                    <th>
                        <div class="sortable" data-sort="@SortHelper.STT" data-url="@Url.Action("GetData", new { sort = stt, order = orderStt, filter = ViewBag.CurrentFilter })">
                            #
                        </div>
                    </th>
                    <th style="width:25%">
                        <div class="sortable" data-sort="@SortHelper.NAME" data-url="@Url.Action("GetData", new { sort = name, order = orderName, filter = ViewBag.CurrentFilter })">
                            Name
                        </div>
                    </th>
                    <th>
                        <div class="sortable" data-sort="@SortHelper.DATE" data-url="@Url.Action("GetData", new { sort = date, order = orderDate, filter = ViewBag.CurrentFilter })">
                            Date Create
                        </div>
                    </th>
                    <th>Total questions</th>
                    <th>Status</th>
                    <th style="width:150px">Actions</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < Model.Count(); i++)
                {
                    var item = Model[i];
                    bool isPublic = item.status == (int)OnlineAptitudeExam.Utils.Enums.Status.PUBLIC;
                    //string status = item.status == (int)OnlineAptitudeExam.Utils.Enums.Status.PUBLIC ? "Published" : "Private";

                    <tr data-id='@item.id'>
                        <td>
                            @((Model.PageNumber - 1) * Model.PageSize + i + 1)
                        </td>
                        <td class="field-name">
                            @Html.DisplayFor(modelItem => item.name)
                        </td>
                        <td>
                            @OnlineAptitudeExam.Utils.DateUtils.toDateString(item.created_date)
                        </td>
                        <td>
                            @item.Questions.Count
                        </td>
                        <td>
                            <div class="form-switch">
                                <input class="form-check-input" data-url='@Url.Action("ToggleStatus","Tests")' type="checkbox" @(isPublic ? "checked" : "")>
                            </div>
                        </td>
                        <td class="d-flex justify-content-center">
                            <button class="btn btn-warning btn-sm" onclick="showTestsModal($(this), false, '@Url.Action("Update", "Tests")');">
                                <i class="mdi mdi-pencil"></i>
                            </button>
                            <button class="btn btn-primary btn-sm ms-1 me-1" href="@Url.Action("Detail","Tests")">
                                <i class="mdi mdi-text-box-multiple-outline"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="showDeleteTestsModal($(this), '@Url.Action("Delete", "Tests")')" >
                                <i class="mdi mdi-delete-outline"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />
    <div id="contentPager">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        @Html.PagedListPager(Model, page => Url.Action("GetData",
            new { sort = ViewBag.CurrentSort, order = ViewBag.CurrentOrder, filter = ViewBag.CurrentFilter, page = page }))
    </div>
</div>
 