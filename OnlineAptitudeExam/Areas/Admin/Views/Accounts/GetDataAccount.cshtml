@model PagedList.IPagedList<OnlineAptitudeExam.Models.Account>
@using PagedList.Mvc;
@using OnlineAptitudeExam.Utils;
@{
    Layout = null;

}
<div class="card card-body shadow-sm">
    <div class="table-responsive">
        <table class="table table-custom table-hover table-bordered" id="table-data-accounts" data-sort="@ViewBag.CurrentSort" data-order="@ViewBag.CurrentOrder">
            @{
                string orderStt = SortHelper.GetOrder(SortHelper.STT, ViewBag.CurrentSort, ViewBag.CurrentOrder);
                string stt = SortHelper.ValueOrNull(SortHelper.STT, orderStt);
                string orderName = SortHelper.GetOrder(SortHelper.NAME, ViewBag.CurrentSort, ViewBag.CurrentOrder);
                string name = SortHelper.ValueOrNull(SortHelper.NAME, orderName);
                string orderDate = SortHelper.GetOrder(SortHelper.DATE, ViewBag.CurrentSort, ViewBag.CurrentOrder);
                string date = SortHelper.ValueOrNull(SortHelper.DATE, orderDate);
            }
            <thead>
                <tr>
                    <th class="sortable" data-sort="@SortHelper.STT" data-url="@Url.Action("Index", new { sort = stt, order = orderStt, filter = ViewBag.CurrentFilter })">
                        #
                    </th>
                    <th> Username   </th>
                    <th> Password   </th>
                    <th class="sortable" data-sort="@SortHelper.NAME" data-url="@Url.Action("Index", new { sort = name, order = orderName, filter = ViewBag.CurrentFilter })">
                        Full Name
                    </th>

                    <th class="sortable" data-sort="@SortHelper.DATE" data-url="@Url.Action("Index", new { sort = date, order = orderDate, filter = ViewBag.CurrentFilter })">
                        Created at
                    </th>
                    <th colspan="2"> Status </th>
                    <th colspan="2"> Actions</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < Model.Count(); i++)
                {
                    var item = Model[i];
                    bool isPublic = item.status == (int)Enums.Status.LOCK;


                    <tr data-id='@item.id'>
                        <td>
                            @((Model.PageNumber - 1) * Model.PageSize + i + 1)
                        </td>
                        <td class="field-username">
                            @Html.DisplayFor(modelItem => item.username)
                        </td>
                        <td class="field-password">
                            @Html.DisplayFor(modelItem => item.password)
                        </td>
                        <td class="field-fullname">
                            @Html.DisplayFor(modelItem => item.fullname)
                        </td>
                        <td>
                            @OnlineAptitudeExam.Utils.DateUtils.toDateString(item.created_at)
                        </td>
                        <td class="field-status">
                            @(item.status == 0 ? "Unlock":"Locked")
                        </td>
                        <td>
                            <div class="form-switch">
                                <input class="form-check-input" onclick="AccountsToggleStatus($(this)); return false" type="checkbox" @(isPublic ? "checked" : "")>
                            </div>
                        </td>

                        <td class="d-flex justify-content-center">
                            <button class="btn btn-warning btn-sm" onclick="showAccountsModal($(this), false);">
                                <i class="mdi mdi-pencil"></i>
                            </button>
                            <!--@Html.ActionLink("Details", "Details", new { id = item.id })-->
                            <button class="btn btn-primary btn-sm ms-1 me-1">
                                <i class="mdi mdi-text-box-multiple-outline" onclick="showDetailAccount($(this))"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />
    <div id="contentPager">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        @Html.PagedListPager(Model, page => Url.Action("Index", new
        {
            sort = ViewBag.CurrentSort,
            order = ViewBag.CurrentOrder,
            filter = ViewBag.CurrentFilter,
            page = page
        }))
    </div>
</div> 
<script>
    if (window.AccountsIndex) {
        AccountsIndex()
    }
</script>