@model OnlineAptitudeExam.Models.Exam
@using OnlineAptitudeExam.Utils
@using OnlineAptitudeExam.Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@{
    var account = Model.Account;
}

<div class="row">
    <div class="col-9 mb-3">
        <button onclick="history.back()" class="btn btn-outline-github" type="button">
            <i class="mdi mdi-keyboard-backspace"></i>
        </button>
        <div class="ms-2 d-inline-block font-20">
            <span>Report Detail</span>
        </div>
    </div>
    <div class="col-3 mb-3 d-flex justify-content-end align-items-center position-fixed" style=" right: 0; z-index:1">
        <button class="btn btn-outline-reddit btn-sm shadow bg-inverse-light"
                style="height: 40px; width: 40px; border-radius: 50%; border-color: #ff4500 !important"
                onclick="showSelectExportMethod()" type="button">
            <i class="fa-regular fa-file-pdf"></i>
        </button>
    </div>
</div>

<div class="card export_report ">
    <div class="card-body export_report-body " id="export_report">
        <h3 class="text-center text-decoration-underline py-4">Candidate Information</h3>
        <div class="d-flex flex-wrap align-items-center font-18">
            <div class="col-sm-3 col-12 my-4 d-flex flex-column align-items-center text-center">
                <img class="rounded-circle mb-2" style="width:100px" src="~/Content/images/avatars/@(account.avatar == null ? "user_placeholder.png": account.avatar)">
                <div><span class="font-weight-bold">@(account.fullname == null ? "unknown": account.fullname)</span></div>
                <div>@(account.email == null ? "unknown": account.email)</div>
            </div>
            <div class="col-sm-9 col-12 mb-sm-0 mb-4">
                <div class=" d-flex">
                    <span style="min-width:120px">Usename:</span>
                    <div class="flex-grow-1 mb-3 border-bottom">
                        @(account.username == null ? "unknown": account.username)
                    </div>
                </div>
                <div class="d-flex">
                    <span style="min-width:120px">Age:</span>
                    <div class="flex-grow-1 mb-3 border-bottom">
                        @(account.age == null ? "unknown": account.age.ToString())
                    </div>
                </div>
                <div class="d-flex">
                    <span style="min-width:120px">Address:</span>
                    <div class="flex-grow-1 mb-3 border-bottom">
                        @(account.address == null ? "unknown": account.address)
                    </div>
                </div>
                <div class="d-flex">
                    <span style="min-width:120px">Descriptions:</span>
                    <div class="flex-grow-1 border-bottom">
                        @(account.descriptions == null ? "unknown": account.descriptions)
                    </div>
                </div>
            </div>
        </div>
        <h3 class="text-center text-decoration-underline py-4 border-top">Exam Result</h3>
        <div class="d-flex flex-column align-items-end font-17">
            <span class="my-1">Time Start: <b class="text-primary">@DateUtils.toDateString(Model.time_start)</b></span>
            <span class="my-1">Time End&nbsp;: <b class="text-primary">@DateUtils.toDateString(Model.time_end)</b></span>
            <span class="text-youtube my-1 font-18">Score: <b id="scores">?/30</b></span>
        </div>
        <div id="questions-container">
            @{
                var examDetails = Model.ExamDetails.OrderBy(ex => ex.Question.type).ToList();
                var questions = Model.Test.Questions.OrderBy(ex => ex.type).ToList();

                int currentType = -1;
                double totalScore = 0, examScore = 0;
                for (int i = 0; i < questions.Count; i++)
                {
                    var question = questions[i];
                    var examDetail = examDetails.Count > i ? examDetails[i] : null;
                    if(examDetail == null)
                    {
                        examDetail = new ExamDetail();
                        examDetail.selected_question = "[]";
                    }

                    var answers = JsonConvert.DeserializeObject(question.answers) as JArray;
                    var correctAnswers = (JsonConvert.DeserializeObject(question.correct_answers) as JArray).Select(item => (int)item).ToArray();
                    var selectedAnswers = (JsonConvert.DeserializeObject(examDetail.selected_question) as JArray).Select(item => (int)item).ToArray();

                    bool isCorrect = examDetail.selected_question == question.correct_answers;
                    string statusQuestionClass;
                    examScore += question.score.Value;
                    if (isCorrect)
                    {
                        totalScore += question.score.Value;
                        statusQuestionClass = "mdi-check-circle text-success";
                    }
                    else
                    {
                        statusQuestionClass = "mdi-close-circle text-youtube";
                    }

                    if (currentType != question.type)
                    {
                        currentType = question.type.Value;
                        <span class="pt-3 pb-2 fw-bold font-20 d-inline-block">@(currentType + 1). @Enums.GetQuestionType(currentType).</span>
                    }
                    <div class="question_item card card-body shadow-sm mb-4">
                        <div class="question_item-title pb-2 font-20">
                            <div class="d-flex">
                                <i class="mdi me-3 @statusQuestionClass"></i>
                                <span>
                                    Question&nbsp;<span>@(i+1)</span>:&nbsp;<span>@question.question</span>&nbsp;<b class="font-17">(@question.score Point)</b>
                                </span>
                            </div>
                        </div>
                        <div class="question_item-answers">
                            @for (int j = 0; j < answers.Count; j++)
                            {
                                bool isCorrectAns = correctAnswers.Contains(j);
                                bool isSelected = selectedAnswers.Contains(j);
                                string border =
                                    isCorrectAns ? "border-2 border-dashed border-success text-success" :
                                    isSelected ? "border-2 border-dashed border-danger text-danger" : "border-1 border-dashed border-secondary";
                                string type = correctAnswers.Count() == 1 ? "radio" : "checkbox";

                                <div class="d-flex">
                                    <input class="me-3" type="@type" style="width:18px; pointer-events:none;" @(isSelected ? "checked" : "") />
                                    <div class="p-2 my-2 flex-grow-1 font-17 @border ">
                                        @answers[j]
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                <div class="d-none" id="tmpScores">@totalScore / @examScore</div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="selectExportMethod" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header text-reddit">
                <span class="p-0 me-1"><i class="fa-regular fa-file-pdf" style="font-size:1.5em"></i></span>
                <h5 class="modal-title" id="staticBackdropLabel">Choose method</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Choose a method for this action!
            </div>
            <div class="modal-footer justify-content-evenly">
                <button type="button" class="btn btn-outline-behance method preview" data-bs-dismiss="modal">Preview</button>
                <button type="button" class="btn btn-outline-reddit method save" data-bs-dismiss="modal">Save now</button>
            </div>
        </div>
    </div>
</div>


@if (ViewBag.isAjax != null && ViewBag.isAjax)
{
    Layout = null;
    <script>
        if (!window.updateScore) {
            loadScripts("/Scripts/admin/ReportController.js");
        }
        loadScripts("updateScore()", true)
    </script>
}

@section scripts {
    <script src="~/Scripts/admin/ReportController.js"></script>
    <script>updateScore()</script>
}